`timescale 1ns / 1ps
module maindec(input  logic [5:0] op,
               output logic       memtoreg, memwrite,
               output logic       branch, alusrc,
               output logic       regdst, regwrite,
               output logic       jump,
               output logic [1:0] aluop);

  logic [9:0] controls;

  assign {regwrite, regdst, alusrc, branch, memwrite,
          memtoreg, jump, aluop} = controls;

  always_comb
    case(op)
      6'b000000: controls <= 9'b110000010; // RTYPE
      6'b100011: controls <= 9'b101001000; // LW
      6'b101011: controls <= 9'b001010000; // SW
      6'b000100: controls <= 9'b000100001; // BEQ
      6'b001000: controls <= 9'b101000000; // ADDI
      6'b000010: controls <= 9'b000000100; // J
      6'b001110: controls <= 9'b101000011; // XORI
      6'b001111: controls <= 9'b101000011; // LUI
      6'b000110: controls <= 9'b110000010; // SRLV
      6'b010001: controls <= 9'b101000011; // LI
      default:   controls <= 9'bxxxxxxxxx; // illegal op
    endcase
endmodule


`timescale 1ns / 1ps
module aludec(input  logic [5:0] op,
              input  logic [5:0] funct,
              input  logic [1:0] aluop,
              output logic [3:0] alucontrol);

  always_comb
    case(aluop)
      2'b00: alucontrol <= 3'b010;  // add (for lw/sw/addi)
      2'b01: alucontrol <= 3'b110;  // sub (for beq)
      2'b10: case(funct)            // R-type instructions
          6'b100000: alucontrol <= 3'b010; // add
          6'b100010: alucontrol <= 3'b110; // sub
          6'b100100: alucontrol <= 3'b000; // and
          6'b100101: alucontrol <= 3'b001; // or
          6'b101010: alucontrol <= 3'b111; // slt
          6'b000110: alucontrol <= 3'b110; // SRLV
          default:   alucontrol <= 3'bxxx; // ???
        endcase
      2'b11: case(op)               // I-type instructions
          6'b001110: alucontrol <= 3'b100; // xori
          6'b001111: alucontrol <= 3'b101; // lui
          6'b010001: alucontrol <= 3'b111; // LI
          default:   alucontrol <= 3'bxxx; // ???
        endcase
    endcase
endmodule


`timescale 1ns / 1ps
module alu(input  logic [31:0] a, b,
           input  logic [3:0]  alucontrol,
           output logic [31:0] result,
           output logic        zero);
  
  logic [31:0] condinvb, sum;

  assign condinvb = alucontrol[2] ? ~b : b;
  assign sum = a + condinvb + alucontrol[2];
 
  always_comb
    case (alucontrol[2:0])
      3'b000: result = a & b;
      3'b001: result = a | b;
      3'b010: result = sum;
      3'b011: result = sum[31];
      3'b100: result = a ^ b;       // XORI
      3'b101: result = {b, 16'b0};  // LUI
      3'b110: result = b >> a;      // SRLV
      3'b111: result = b;           // LI
    endcase

  assign zero = (result == 32'b0);
endmodule

20100005
20110005
02309022
3A530001
0270A806
3C140002
02959020
44160004
02569020