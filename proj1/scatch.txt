loop:
	beq	$t0, $t1, end
	li	$v0, 12
	syscall
	move	$t2, $v0
	sb	$t2, 0($s0)
	addi	$t0, $t0, 1
	addi	$s0, $s0, 1
	j	loop
end: 	li	$v0, 10
	syscall

#############

get_input:
	li	$t0, 0
	li	$t1, 0	
	li	$t2, 6
loop:
	beq	$t0, $t2, end_loop
	beq	$t1, $t2, end_inner_loop
	li	$v0, 12
	syscall
	move	$t2, $v0
	sb	$t2, 0($t5)
	addi	$t0, $t0, 1
	addi	$t5, $t5, 1
	j	loop
	
end_inner_loop:
	li	$t0, 0
	addi	$t1, $t1, 1
	j	loop
	
end_loop: 	
	li	$v0, 10 
	syscall
	


##### PRINTING OF ARRAY ######
.macro print(%p)
	li	$t0, 0			# r
	li	$t1, 0			# c
	li	$t2, 6			# cols
	li	$t3, 4			# rows
	li	$t4, 0x2e		# ASCII '.'
init_loop:
	beq	$t0, $t3, end_init_loop
	beq	$t1, $t2, end_inner_init_loop
	lb	$t4, 0(%p)
	li	$v0, 11
	move	$a0, $t4
	syscall
	addi	%p, %p, 1
	addi	$t1, $t1, 1
	j	init_loop

end_inner_init_loop:
	li	$t1, 0
	addi	$t0, $t0, 1
	li 	$v0, 4			# Print string syscall
	la 	$a0, newline 		# Readies printing of newline
	syscall				# Print newline
	j	init_loop

end_init_loop:
.end_macro

	move	$t5, $s0
	move	$t6, $s1
	print($t5)
	print($t6)